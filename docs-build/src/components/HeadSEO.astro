---
import { SITE, OPEN_GRAPH } from "../config"
export interface Props {
  content: {
    title?: string
    astro?: { headings?: { text?: string }[] }
    description?: string
    image?: { src?: string; alt?: string }
    ogLocale?: string
  }
  canonicalURL: URL | string
}
const { content = {}, canonicalURL } = Astro.props
const title = content.title || content?.astro?.headings?.[0]?.text
const formattedContentTitle =
  title && title !== SITE.title ? `${title} ðŸš€ ${SITE.title}` : SITE.title
const description = content.description ? content.description : SITE.description
const imageSrc = content?.image?.src ?? OPEN_GRAPH.image.src
const canonicalImageSrc = imageSrc && new URL(imageSrc, Astro.site)
const imageAlt = content?.image?.alt ?? OPEN_GRAPH.image.alt
---

<meta name="description" content={description} />
<meta name="keywords" content={SITE.keywords.join(",")} />
<!-- Page Metadata -->
<link rel="canonical" href={canonicalURL} />

<!-- OpenGraph Tags -->
<meta property="og:title" content={formattedContentTitle} />
<meta property="og:type" content="article" />
<meta property="og:url" content={canonicalURL} />
<meta property="og:locale" content={content.ogLocale ?? SITE.defaultLanguage} />
{
  canonicalImageSrc && (
    <>
      <meta property="og:image" content={canonicalImageSrc} />
      {imageAlt && <meta property="og:image:alt" content={imageAlt} />}
    </>
  )
}
<meta property="og:description" content={description} />
<meta property="og:site_name" content={SITE.title} />

<!-- Twitter Tags -->
<meta name="twitter:card" content="summary" />
<meta name="twitter:site" content={OPEN_GRAPH.twitter} />
<meta name="twitter:title" content={formattedContentTitle} />
<meta name="twitter:description" content={description} />
{
  canonicalImageSrc && (
    <>
      <meta name="twitter:image" content={canonicalImageSrc} />
      {imageAlt && <meta name="twitter:image:alt" content={imageAlt} />}
    </>
  )
}

<!--
  TODO: Add json+ld data, maybe https://schema.org/APIReference makes sense?
  Docs: https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data
  https://www.npmjs.com/package/schema-dts seems like a great resource for implementing this.
  Even better, there's a React component that integrates with `schema-dts`: https://github.com/google/react-schemaorg
-->
