---
const layers = [
  {
    no: 1,
    starsBoxShadow: buildBoxShadow(600),
    animationDuration: 500,
    size: 1,
  },
  {
    no: 2,
    starsBoxShadow: buildBoxShadow(200),
    animationDuration: 200,
    size: 2,
  },
  {
    no: 3,
    starsBoxShadow: buildBoxShadow(100),
    animationDuration: 100,
    size: 3,
  },
]

const vars: Record<string, string> = {}
for (let { no, starsBoxShadow } of layers) {
  vars[`stars-box-shadow${no}`] = starsBoxShadow
}

function buildBoxShadow(count: number) {
  let shadows = []
  for (let index = 0; index < count; index++) {
    const x = Math.floor(Math.random() * 2000 - 1000)
    const y = Math.floor(Math.random() * 2000 - 1000)
    shadows.push(`${x}px ${y}px var(--theme-star)`)
  }
  return shadows.join(",")
}
---

<div class="stars-wrapper">
  {
    layers.map(({ no, animationDuration, size }) => (
      <div
        class:list={["stars", `stars${no}`]}
        style={`
          --stars-box-shadow: var(--stars-box-shadow${no});
          --stars-animation-duration: ${animationDuration}s;
          --stars-size: ${size}px;
        `}
      />
    ))
  }
</div>

<style define:vars={vars}>
  :root {
    --theme-star: var(--theme-text, #fff);
  }

  .stars-wrapper {
    position: absolute;
    pointer-events: none;
    z-index: 1000;
  }

  .stars {
    border-radius: 50%;
    background: transparent;

    position: relative;
    top: 0;
    left: 0;
    pointer-events: none;

    width: var(--stars-size);
    height: var(--stars-size);
    box-shadow: var(--stars-box-shadow);
    animation: star2d linear infinite;
    animation-duration: var(--stars-animation-duration);
  }
  .stars:after {
    border-radius: 50%;
    content: "";
    position: absolute;
    top: 2000px;
    left: 500px;
    background: transparent;

    width: var(--stars-size);
    height: var(--stars-size);
    box-shadow: var(--stars-box-shadow);
  }
  @keyframes star2d {
    from {
      transform: translate(0, 0);
    }
    to {
      transform: translate(-500px, -2000px);
    }
  }
</style>
