---
const animationTime = 100 / 2
const vars: Record<string, string> = {
  "stars-animation-duration": `${animationTime}s`,
}
const layers = Array.from({ length: 10 }, (_, i) => i + 1)

function buildPoints(count: number, size: number) {
  let points = []
  for (let index = 0; index < count; index++) {
    const x = Math.floor(Math.random() * size)
    const y = Math.floor(Math.random() * size)
    points.push({ x, y })
  }
  return points
}
---

<div class="stars-wrapper">
  {
    layers.map((i) => (
      <svg
        class:list={["stars", "stars-layer", `stars${i}`]}
        width="1000px"
        height="1000px"
        style={`--stars-animation-delay: -${
          (i - 1) * (animationTime / layers.length)
        }s;`}
      >
        {buildPoints(30, 1000).map(({ x, y }) => (
          <circle cx={x} cy={y} r="1" />
        ))}
      </svg>
    ))
  }
  <svg class="stars-bg stars" width="2000px" height="2000px">
    {buildPoints(600, 2000).map(({ x, y }) => <circle cx={x} cy={y} r="0.5" />)}
  </svg>
</div>

<style define:vars={vars}>
  :root {
    --theme-star: var(--theme-text, #fff);
  }

  .stars-wrapper {
    perspective: 5px;
    position: absolute;
    pointer-events: none;
    z-index: 1000;
    animation: rotation linear infinite;
    animation-duration: calc(var(--stars-animation-duration) * 5);
  }
  @keyframes rotation {
    0% {
      transform: rotate(0);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  svg.stars circle {
    fill: var(--theme-star);
  }
  .stars {
    border-radius: 50%;
    background: transparent;

    position: absolute;
    top: 0;
    left: 0;
    pointer-events: none;
  }
  .stars-layer {
    animation: stars3d linear infinite;
    animation-duration: var(--stars-animation-duration);
    animation-delay: var(--stars-animation-delay);
    margin-left: -500px;
    margin-top: -500px;
  }
  .stars-bg {
    margin-left: -1000px;
    margin-top: -1000px;
  }
  @keyframes stars3d {
    from {
      opacity: 0;
      transform: scale(0.1) translateZ(-5px);
    }
    60% {
      opacity: 1;
    }
    80% {
      opacity: 1;
    }
    95% {
      opacity: 0;
    }
    to {
      opacity: 0;
      transform: scale(1.5) translateZ(5px);
    }
  }
</style>
